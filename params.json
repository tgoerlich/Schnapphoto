{"name":"Schnapphoto","google":"","body":"Schnapphoto\r\n===========\r\n\r\nMiddleware and webapp-interface to remotely control your digital camera with a mobile device\r\n\r\nAbout this project\r\n==================\r\n\r\nThis project is based on ideas of David Hunt (http://davidhunt.ie/?p=2641) and KÃ¼rth Williams (http://islandinthenet.com/2012/08/23/hdr-photography-with-raspberry-pi-and-gphoto2/) who describe different approaches on how to control a digital camera remotely with a Raspberry Pi mini computer.\r\nThe vision is to have a battery powered linux system sitting close to the camera and function as a \"second brain\" for it, enhancing the built-in features in many ways (bracketing, focus stacking, time lapse, remote control....)\r\n\r\nThis implementation offers a easy to use HTML5 user interface for remote camera control and a python back-end that communicates with the camera.\r\nThe frontend is designed for smart phones (any make/model), it should work with any device supported by jquery mobile (http://jquerymobile.com/gbs/)\r\nThe backend is aimed to work with all cameras supported by gPhoto2 (http://www.gphoto.org/proj/libgphoto2/support.php). \r\n\r\nplanned features:\r\n- control camera in a libgphoto-session (keep session open instead of time consuming repeated inits for every shot) [Status: works]\r\n- use your mobile device (smartphone) to\r\n  - see and alter capture settings (like aperture, shutter speed etc) [works]\r\n  - shoot pictures [works]\r\n  - shoot bracketing series [works]\r\n  - shoot time lapse series [works]\r\n  - combined bracketing and time lapse series [works]\r\n  - monitor camera status (battery life etc) [not implemented yet]\r\n  - see previews [not implemented yet]\r\n  - browse camera roll [not implemented yet]\r\n  - geotag pictures using your smartphone's GPS [not implemented yet]\r\n  - synchronise client's / camera's clock and timezone [not implemented yet]\r\n \r\nCurrent status\r\n==============\r\n\r\nRight now, the project is still in \"proof of concept\" status. We have a neat webinterface, camera operations work (read/set capture settings, take pictures, bracketing...)\r\nNext steps:\r\n- read and write back files from camera\r\n- cache read-only values from camera (widget options)\r\n- dynamically adopt UI to camera capabilities\r\n- write GPS data into EXIF block after every shot\r\n- enable tethering (initiate actions when camera button is pressed)\r\n- write command line interface (alternative to CGI interface for testing)\r\n\r\nHow it works\r\n============\r\n\r\nThe backend is mainly running a gphoto session as a daemon. It keeps the connection to the camera open as long as it runs, independent from client. It's routines are called remotely from a CGI-script through the pyro framework.\r\nThe CGI-script itself simply translates URL commands into python calls.\r\nThe backend heavily relies on piggyphoto, the python bindings for libgphoto\r\n\r\nThe frontend is based on jquery mobile. It's a mobile web app that queries the backend dynamically through ajax calls.\r\n\r\nSystem requirements\r\n===================\r\n\r\n- libghoto2 (deleloped on version 2.5, don't know about earlier versions)\r\n- Python 2.7 (didn't try python 3 yet)\r\n- These Python modules:\r\n  - Pyro4\r\n  - Daemon\r\n  - ctypes\r\n  - piggyphoto (find it on github, make sure to get the latest version / trunk)\r\n- jquery mobile 1.3.0 (beta)\r\n- a webserver (apache), configured to execute CGI scripts\r\n\r\nas a client, any recent web browser will do.\r\n\r\nrecommended hardware setup\r\n==========================\r\n- A digital camera that is capable of tethered shootings with gPhoto. I used a Nikon D40X for development.\r\n- A linux system that connects to the camera via usb. In my case, it's a Raspberry Pi with the latest Raspbian Wheezy\r\n- A Wifi-adapter running in host mode (so you can connect to the host with your smartphone if you do shootings outside)\r\n- If you want to move around with your camera and system, a battery power supply my be usefull. I decided to build my own power supply with two LiPo batteries and a step-up DC/DC converter, fitting nicely together with the RasPi and a switch into a little box that sits on the flash mount of my DSLR.\r\n- A smartphone or other mobile device with a recent web browser and Wi-Fi. I personally use an iPhone 4.\r\n","tagline":"control your digital camera with a mobile device","note":"Don't delete this file! It's used internally to help with page regeneration."}